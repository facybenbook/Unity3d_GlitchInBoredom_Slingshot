#pragma kernel SetupRibbon
#pragma kernel UpdateRibbon

#include "Assets/Shaders/SimplexNoise3D.cginc"

RWTexture2D<float4> oPosLife;
RWTexture2D<float4> oVelScale;
RWTexture2D<float4> oRotDir;

Texture2D<float4> uPosLife;
Texture2D<float4> uVelScale;

bool uLaunchRibbon;
float3 uLaunchOrigin;
float3 uLaunchDir;
float3 uLaunchSeed;
float uTrailMaxLength;
float uFrame;

struct Particle 
{
	float3 pos;
	float life;
	float3 vel;
	float scale;
	float4 rotDir;
};

void launchRibbon(in float3 id, inout float3 pos, inout float3 vel, inout float life, inout float scale, in bool isHead)
{
	float4 n = snoise_grad(uLaunchSeed * 123. + (float3)id/uLaunchSeed * 456.);
	pos = uLaunchOrigin + n.xyz * .01;
		
	vel = normalize(uLaunchDir * 6. + n.xyz * 1.) * .3 * (n.w + 1.);

	life = 500.;
	scale = .002;// *abs(n.w);

	if (isHead)
	{
		vel *= 3.;
		scale = .05 + abs(n.w) * .1;
	}
}

void calcPullingForce(inout float3 pos, in float3 pullPos)
{
	float3 dir = pullPos - pos;
	float dist = length(dir);
	dir = normalize(dir);

	if (dist > uTrailMaxLength)
	{
		pos += dir * (dist - uTrailMaxLength) * .5;
	}
}

void addTurbulence(inout float3 pos, in float3 vel, in float scale, in float life) 
{
	float4 n = snoise_grad(pos * 3. + uFrame*.001);
	pos += normalize(pos * vel) * n.xyz * .4 * scale;// *(1. - clamp(life, 0., 1.));
}

void calcRotDir(inout float4 rotDir, in float3 pos, in float3 pPos)
{
	float3 dir = normalize(pos - pPos);
	rotDir = float4(dir, 1.);
}

void kill(uint3 id) 
{
	oPosLife[id.xy] = float4(0., 0., 0., 0.);
	oVelScale[id.xy] = float4(0., 0., 0., 0.);
	oRotDir[id.xy] = float4(0., 0., 0., 0.);
}

[numthreads(8, 8, 1)]
void SetupRibbon(uint3 id : SV_DispatchThreadID)
{
	kill(id);
}

[numthreads(8, 8, 1)]
void UpdateRibbon(uint3 id : SV_DispatchThreadID)
{
	Particle p;

	float4 d = uPosLife.Load(id, 0);
	
	float3 pPos = d.xyz;
	p.pos = pPos;
	p.life = d.w;
	
	d = uVelScale.Load(id, 0);
	p.vel = d.xyz;
	p.scale = d.w;

	// launch
	if (uLaunchRibbon)
	{
		// head
		if (id.x == 0)
			launchRibbon(id, p.pos, p.vel, p.life, p.scale, true);
		else
			launchRibbon(id, p.pos, p.vel, p.life, p.scale, false);
	}

	if (p.life < .001)
	{
		kill(id);

		return;
	}	
	
	// pulling force
	if (id.x > 0)
	{
		uint3 coords = id;
		coords.x -= 1;
		float3 pullPos = uPosLife.Load(coords, 0).xyz;
		calcPullingForce(p.pos, pullPos);

		// update rotation vector
		calcRotDir(p.rotDir, p.pos, pullPos);
	} 
	else 
		calcRotDir(p.rotDir, p.pos, pPos);

	// tubulence
	addTurbulence(p.pos, p.vel, p.scale, p.life);

	// gravity
	p.vel.y -= .0198 * p.scale;

	// damping
	p.vel *= .96;

	// update position
	float timeStep = .1;
	p.pos += p.vel * timeStep;

	// update life
	p.life *= .98;

	oPosLife[id.xy] = float4(p.pos, p.life);
	oVelScale[id.xy] = float4(p.vel, p.scale);
	oRotDir[id.xy] = p.rotDir;
}
